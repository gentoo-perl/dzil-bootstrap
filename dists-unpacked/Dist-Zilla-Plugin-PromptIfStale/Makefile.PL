# This Makefile.PL for Dist-Zilla-Plugin-PromptIfStale was generated by
# Dist::Zilla::Plugin::MakeMaker::Awesome 0.38.
# Don't edit it but the dist.ini and plugins used to construct it.

use strict;
use warnings;

use 5.010;
use ExtUtils::MakeMaker;

my %WriteMakefileArgs = (
  "ABSTRACT" => "Check at build/release time if modules are out of date",
  "AUTHOR" => "Karen Etheridge <ether\@cpan.org>",
  "CONFIGURE_REQUIRES" => {
    "CPAN::Meta::Requirements" => "2.120620",
    "ExtUtils::MakeMaker" => 0,
    "Module::Metadata" => 0
  },
  "DISTNAME" => "Dist-Zilla-Plugin-PromptIfStale",
  "LICENSE" => "perl",
  "MIN_PERL_VERSION" => "5.010",
  "NAME" => "Dist::Zilla::Plugin::PromptIfStale",
  "PREREQ_PM" => {
    "CPAN::DistnameInfo" => 0,
    "Config::MVP::Section" => "2.200004",
    "Cwd" => 0,
    "Dist::Zilla" => "4.300039",
    "Dist::Zilla::App" => 0,
    "Dist::Zilla::Role::AfterBuild" => 0,
    "Dist::Zilla::Role::BeforeBuild" => 0,
    "Dist::Zilla::Role::BeforeRelease" => 0,
    "Dist::Zilla::Util::AuthorDeps" => "5.021",
    "Encode" => 0,
    "HTTP::Headers" => 0,
    "HTTP::Tiny" => 0,
    "List::Util" => "1.45",
    "Module::CoreList" => "5.20151213",
    "Module::Metadata" => "1.000023",
    "Moose" => 0,
    "Moose::Util" => 0,
    "Moose::Util::TypeConstraints" => 0,
    "Parse::CPAN::Packages::Fast" => 0,
    "Path::Tiny" => 0,
    "Term::ANSIColor" => "3.00",
    "Try::Tiny" => 0,
    "YAML::Tiny" => 0,
    "namespace::autoclean" => 0,
    "strict" => 0,
    "version" => 0,
    "warnings" => 0
  },
  "TEST_REQUIRES" => {
    "App::Cmd::Tester" => "0.328",
    "Class::Method::Modifiers" => 0,
    "Dist::Zilla::App::Tester" => 0,
    "Dist::Zilla::Chrome::Test" => 0,
    "Dist::Zilla::Role::Plugin" => 0,
    "Dist::Zilla::Role::PluginBundle::Easy" => 0,
    "ExtUtils::MakeMaker" => 0,
    "File::Spec" => 0,
    "File::pushd" => 0,
    "Module::Runtime" => 0,
    "Test::DZil" => 0,
    "Test::Deep" => 0,
    "Test::Fatal" => 0,
    "Test::More" => "0.96",
    "if" => 0,
    "lib" => 0
  },
  "VERSION" => "0.054",
  "test" => {
    "TESTS" => "t/*.t"
  }
);

%WriteMakefileArgs = (
    %WriteMakefileArgs,
    $ENV{CONTINUOUS_INTEGRATION} && !$ENV{PROMPTIFSTALE_REALLY_RUN_TESTS} ? ( test => { TESTS => 't/99-placeholder.t' } ) : (),
);

my %FallbackPrereqs = (
  "App::Cmd::Tester" => "0.328",
  "CPAN::DistnameInfo" => 0,
  "Class::Method::Modifiers" => 0,
  "Config::MVP::Section" => "2.200004",
  "Cwd" => 0,
  "Dist::Zilla" => "4.300039",
  "Dist::Zilla::App" => 0,
  "Dist::Zilla::App::Tester" => 0,
  "Dist::Zilla::Chrome::Test" => 0,
  "Dist::Zilla::Role::AfterBuild" => 0,
  "Dist::Zilla::Role::BeforeBuild" => 0,
  "Dist::Zilla::Role::BeforeRelease" => 0,
  "Dist::Zilla::Role::Plugin" => 0,
  "Dist::Zilla::Role::PluginBundle::Easy" => 0,
  "Dist::Zilla::Util::AuthorDeps" => "5.021",
  "Encode" => 0,
  "ExtUtils::MakeMaker" => 0,
  "File::Spec" => 0,
  "File::pushd" => 0,
  "HTTP::Headers" => 0,
  "HTTP::Tiny" => 0,
  "List::Util" => "1.45",
  "Module::CoreList" => "5.20151213",
  "Module::Metadata" => "1.000023",
  "Module::Runtime" => 0,
  "Moose" => 0,
  "Moose::Util" => 0,
  "Moose::Util::TypeConstraints" => 0,
  "Parse::CPAN::Packages::Fast" => 0,
  "Path::Tiny" => 0,
  "Term::ANSIColor" => "3.00",
  "Test::DZil" => 0,
  "Test::Deep" => 0,
  "Test::Fatal" => 0,
  "Test::More" => "0.96",
  "Try::Tiny" => 0,
  "YAML::Tiny" => 0,
  "if" => 0,
  "lib" => 0,
  "namespace::autoclean" => 0,
  "strict" => 0,
  "version" => 0,
  "warnings" => 0
);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.033
test_requires('IO::Pty') if isnt_os('MSWin32');
# Dist::Zilla 5.033 has an insufficient Config::MVP prerequisite
requires('Dist::Zilla', '5.034') if has_module('Dist::Zilla', '== 5.033');
requires('Log::Dispatch', '2.49') if has_module('Log::Dispatch', '> 2.46, < 2.49');
requires('Log::Dispatch', '2.61') if has_module('Log::Dispatch', '> 2.58, < 2.61');

unless ( eval { ExtUtils::MakeMaker->VERSION(6.63_03) } ) {
  delete $WriteMakefileArgs{TEST_REQUIRES};
  delete $WriteMakefileArgs{BUILD_REQUIRES};
  $WriteMakefileArgs{PREREQ_PM} = \%FallbackPrereqs;
}

delete $WriteMakefileArgs{CONFIGURE_REQUIRES}
  unless eval { ExtUtils::MakeMaker->VERSION(6.52) };

WriteMakefile(%WriteMakefileArgs);

# inserted by Dist::Zilla::Plugin::DynamicPrereqs 0.033
sub _add_prereq {
  my ($mm_key, $module, $version_or_range) = @_;
  $version_or_range ||= 0;
  warn "$module already exists in $mm_key (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $WriteMakefileArgs{$mm_key}{$module}
      and $WriteMakefileArgs{$mm_key}{$module} ne '0'
      and $WriteMakefileArgs{$mm_key}{$module} ne $version_or_range;
  warn "$module already exists in FallbackPrereqs (at version $WriteMakefileArgs{$mm_key}{$module}) -- need to do a sane metamerge!"
    if exists $FallbackPrereqs{$module} and $FallbackPrereqs{$module} ne '0'
        and $FallbackPrereqs{$module} ne $version_or_range;
  $WriteMakefileArgs{$mm_key}{$module} = $FallbackPrereqs{$module} = $version_or_range;
  return;
}

sub has_module {
  my ($module, $version_or_range) = @_;
  require Module::Metadata;
  my $mmd = Module::Metadata->new_from_module($module);
  return undef if not $mmd;
  return $mmd->version($module) if not defined $version_or_range;

  require CPAN::Meta::Requirements;
  my $req = CPAN::Meta::Requirements->new;
  $req->add_string_requirement($module => $version_or_range);
  return 1 if $req->accepts_module($module => $mmd->version($module));
  return 0;
}

sub isnt_os {
  foreach my $os (@_) {
    return 0 if $os eq $^O;
  }
  return 1;
}

sub requires { goto &runtime_requires }

sub runtime_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(PREREQ_PM => $module, $version_or_range);
}

sub test_requires {
  my ($module, $version_or_range) = @_;
  _add_prereq(TEST_REQUIRES => $module, $version_or_range);
}
